Primero compilo con gcc -Wall. Los warnings son los siguientes: 

************************************************************************************
exampleStrings.c: In function ‘gets_example_func’:
exampleStrings.c:32:16: warning: ‘return’ with a value, in function returning void
         return 1;
                ^
exampleStrings.c:28:6: note: declared here
 void gets_example_func(void) {
      ^~~~~~~~~~~~~~~~~
exampleStrings.c: In function ‘get_y_or_n’:
exampleStrings.c:51:2: warning: implicit declaration of function ‘gets’; did you mean ‘fgets’? [-Wimplicit-function-declaration]
  gets(response);
  ^~~~
  fgets
exampleStrings.c: In function ‘main’:
exampleStrings.c:73:10: warning: unused variable ‘analitic3’ [-Wunused-variable]
     char analitic3[100]="аналитик";
          ^~~~~~~~~
exampleStrings.c:69:9: warning: unused variable ‘size_array2’ [-Wunused-variable]
     int size_array2 = 100;
         ^~~~~~~~~~~
exampleStrings.c:68:9: warning: unused variable ‘size_array1’ [-Wunused-variable]
     int size_array1 = strlen("аналитик");
         ^~~~~~~~~~~
/tmp/ccO4HnZZ.o: En la función `get_y_or_n':
exampleStrings.c:(.text+0xd8): aviso: the `gets' function is dangerous and should not be used.
*************************************************************************************

Se han corregido los warnings de compilación de la siguiente manera: 

-Para el primero, se ha impreso en un fichero el error y se ha salido del método con
la función exit(-1). La escritura del caracter '\0' en el buffer se ejecutará si no ha saltado el error. 

-Para el segundo se ha sustituido la función gets, la cual recomienda el parámetro de compilación
-Wall no utilizar, por un scanf de un único caracter, no reservando más memoria de la necesaria.
Posteriormente, se trabajará con él. Además, la variable response era un array de tamaño 8, cuando solamente se requería
una variable para almacenar una letra.



Las reglas CMU-Cert que incumple el código son la siguientes: 

-Regla ARR02-C, linea 18




Otros cambios:
-Se ha cambiado el tipo int que guardan tamaños de cadenas por el size_t
-Se comprueba que se introducen los argumentos necesarios para la ejecución del programa y su tamaño.
-Los strings que se pasan como argumento serán truncados en el caso de sobrepasar la memoria reservada en el array para ellos. 
-Si no se asigna memoria para el puntero "ptr_char" salta violación de core. Posteriormente la memoria ha de ser liberada. 
